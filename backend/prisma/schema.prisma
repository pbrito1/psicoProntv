// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  name             String?
  phone            String?
  specialty        String?
  identityNumber   String?
  passwordHash     String
  role             Role     @default(THERAPIST)
  refreshTokenHash String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relacionamentos
  bookings       Booking[]
  medicalRecords MedicalRecord[]
}

enum Role {
  THERAPIST
  ADMIN
  USER
}

model Room {
  id          Int       @id @default(autoincrement())
  name        String
  capacity    Int
  resources   Json?
  structure   Json?
  openingTime String?
  closingTime String?
  description String?
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Client {
  id                 Int      @id @default(autoincrement())
  name               String
  email              String   @unique
  phone              String
  birthDate          DateTime
  address            String
  emergencyContact   String
  emergencyPhone     String
  medicalHistory     String?
  currentMedications String?
  allergies          String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relacionamentos
  bookings       Booking[]
  medicalRecords MedicalRecord[]

  // NOVO: Relacionamento com pais/responsáveis
  guardians Guardian[]
}

// NOVO: Modelo para pais/responsáveis
model Guardian {
  id           Int     @id @default(autoincrement())
  name         String
  email        String  @unique
  phone        String
  cpf          String  @unique
  relationship String // "Pai", "Mãe", "Avó", "Tio", etc.
  isPrimary    Boolean @default(false) // Responsável principal

  // Relacionamento com clientes (crianças)
  clients Client[]

  // Dados de acesso
  passwordHash     String
  refreshTokenHash String?
  isActive         Boolean @default(true)

  // Permissões específicas
  canViewRecords    Boolean @default(true)
  canBookSessions   Boolean @default(false)
  canCancelSessions Boolean @default(false)
  canViewBilling    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id          Int           @id @default(autoincrement())
  title       String
  start       DateTime
  end         DateTime
  status      BookingStatus @default(PENDING)
  description String?
  roomId      Int
  room        Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  therapistId Int
  therapist   User          @relation(fields: [therapistId], references: [id])

  // Novo campo para vincular ao cliente
  clientId Int?
  client   Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)

  // Relacionamento com prontuário
  medicalRecord MedicalRecord?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalRecord {
  id              Int         @id @default(autoincrement())
  clientId        Int
  client          Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  therapistId     Int
  therapist       User        @relation(fields: [therapistId], references: [id])
  sessionDate     DateTime
  sessionType     SessionType @default(INDIVIDUAL)
  sessionDuration Int // em minutos

  // Estrutura SOAP
  subjective String // queixa principal
  objective  String // observações objetivas
  assessment String // avaliação
  plan       String // plano terapêutico
  notes      String? // observações adicionais

  nextSessionDate DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relacionamento com agendamento
  bookingId Int?     @unique
  booking   Booking? @relation(fields: [bookingId], references: [id])
}

enum SessionType {
  INDIVIDUAL
  GROUP
  FAMILY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
